Chapter 1: Infrared Control Robot                                                                                                                                                                                                            

Introduction

  In this chapter, we will use a standard motorized platform in conjunction with an Arduino, Infrared receiver, motor-controller, and Infrared Remote to control the robot. At the end of this chapter, you should understand the concepts behind infrared data transmission, serial data transfer, Arduino data String objects, and case statements. Now on to the fun stuff.

Reading Infrared signals

  Infrared data transmission is shockingly simple to implement and equally as cheap. To send a signal using infrared light, you will need two devices: an infrared emitter and an infrared detector. The emitter is nothing more than an LED that only emits light in a specific wavelength (the infrared wavelength is 750 nm - 1 mm) - though these LED's are powered the same way as a normal LED, the light that is emitted is undetectable to the human eye (that is, you can't see it) and must be viewed using a digital camera or other filtering device. The infrared detector is actually a transistor switch that uses infrared light to activate its Base pin, instead of electrical current or voltage. The standard IR detector has 3 pins – power, ground, and signal.  By applying +5v and Gnd signals to the power pins, we can simply plug the signal pin into any digital input pin on the Arduino (so any pin).

  As you may recall, a transistor is a solid-state electrical switch that can be turned On and Off thousands of times every second. The high speed at which the infrared detector can read infrared signals is ideal for low bandwidth data transfer using a string of binary data (0's and 1's) bits. To put it more simply, the typical infrared emitter device (remote control for your TV) sends out about 20 or so timed electrical pulses each time you press a button. Each pulse that is emitted is one of two lengths - if intended to be interpreted as a LOW bit (0), the pulse duration is approximately 500 microseconds (0.5mS), whereas the duration of a HIGH pulse (1) is approximately 1100 microseconds (1.1mS). We can easily read the pulses that are transmitted using the pulseIn() command on the Arduino as shown:  

  pulse_val = pulseIn(4, HIGH, 10000);

  This command takes 3 arguments and will watch a given pin (the first argument - D4 in the example above) as an input. When the pin changes state from 0v to +5v, this pulseIn() command will start recording the time duration in microseconds of how long that pin stays HIGH, which is the second argument that determines what part of the pulse to measure (LOW, HIGH, or CHANGE). Once the electrical pulse is finished and the voltage level drops back down to 0v, the value that was calculated is then passed into the "pulse_val" variable shown above. The third argument is optional, but determines how long (in microseconds) the Arduino will wait on that pin to receive a pulse before it continues to the rest of the loop - if ommitted, the default "timeout" value is 1 second (100000uS).

  So now we know how to read the individual pulses that come out of the infrared detector, but those values are intended to be converted into binary or boolean data (1's or 0's) – where 1 corresponds to a HIGH pulse and 0 corresponds to a LOW pulse. For this we must write a simple function to convert the timed values into boolean values.
Booleanize
  The IR receiver module will convert infrared light received into a pulse of electricity that is either 500mS  in duration or 1100mS (give or take a few microseconds), depending on the intended bit. So I decided to use 750uS as the threshold value that is roughly between 500uS and 1100uS – any pulse duration below the threshold value will be converted to a “0” and any pulse above the threshold will be converted to a “1”. Since a binary bit value type is called a "boolean", I named the function to convert these values "booleanize":

    void booleanize(){
      if (pulse_val > 750){
        pulse_val = 1;
      }
      else {
        pulse_val = 0;
      }
    }

  Well then... that was easy, right? We know that a boolean value can only be either 1 or 0, and we knew that the observed pulse length was either 500mS or 1100mS, so I just picked a value near the middle (750mS) to see if the pulse_val was above or below that and then assigned a 1 or 0 to the value accordingly. Congratulations, you've just been booleanized.

  Now that we have a clean data bit from each pulse, we need to add the booleanized pulses from each signal into one variable that can be analyzed – enter the String object.

Arduino String object
  Typically when using the Arduino, you will see the integer data type (int x = 3;) used to initiate variables for pin assignment, holding non-floating point numbers, or even variable names. We also discussed boolean variables that contain a binary piece of data which can only be either True or False (1 or 0 respectively). The easiest way to create a piece of data that contains the code we need from the IR remote is to create what is called a “String” object that can contain multiple characters in a row, and have more added to the end as needed. A simple string can be created by declaring the String variable type (note the capital S in String), assigning a name to the variable, then assigning a value by placing any characters between quotation marks like so:

	String test_string = “Hello”
  Notice that this string contains characters like “H” and “e” - you can also place digits in a string, though they will not be interpreted as integers that can be added/subtracted/etc.., they will only be recognized as the character representation of a digit, such as the string “3”.  Where the digits 3 + 8 would equal 11, the strings “3” + “8” would equal “38”. We will discuss more about adding strings, but first let us discuss the positioning of characters in a string.
String Index

  Each character in the string is indexed by its position, which because of a programming technique called zero-based numbering or zero-indexing, the very first character in the string holds an index of 0 rather than 1, as you might normally think. This means that in the string “Hello”, the character at index 0 would be “H” and the last character in the string “o” would hold an index of 4. Keep this in mind as we will be accessing parts of the string by their array indexes, and this can be a source of confusion.

  The Arduino language has a method called “substring()” that we can use on String objects that will allow us to check a specific index (or range of indexes) to see if they match another string. We will use this feature after we record the values from the IR remote and store them in the Arduino code – then when we are using our robot, we can compare the currently received code from the IR remote against the ones we recorded to determine the desired function from our robot.

  What? Well, let me put it this way. If you have a sample string “00001”, and we wanted to check and see if the character at index position 4 (the one at the end) is equal to “1”, we would use the substring method to make this query:

  String tester = “00001”
  if (tester.substring(4) == "1"){
    // do something cool here
  }

  You would definitely get to do something cool there, because that if statement would pass since the last character (index 4) in the string named “tester” is equal to 1.

String Concatenation
  One interesting feature about strings (that we will use) is that you can append or concatenate one string onto the end of another, without disrupting the position of the original characters, like so:

  String stringOne = “Hello ”;
  String stringTwo = “World”;
  String stringThree = stringOne + stringTwo;
  stringThree => “Hello World”

  Notice how we declared 3 separate string objects, the third one being the sum of the first two. We can simply add stringOne and stringTwo together, which appended the content of stringTwo to the end of stringOne. The final line is what the resulting stringThree would return.
  We will similarly use string concatenation to keep adding each boolean value that we decode from the IR detector, and arrange them in the order that they were received. This way we can observe a consistent binary string which will vary depend on what function is being called from the remote. A 20 digit binary string can have over 1,000,000 combinations of individual codes (2^20) - luckily there are only a handful of functions that we will use for our robot, so we don't need to decode all 1 million of the possible codes.
	


  Furthermore, to avoid signal noise and interference, most Infrared control devices are tuned to a specific frequency when they transmit signals (similar to a Serial data transfer speed - eg. 9600bps) so that the receiving transistor knows to only listen to infrared signals that are transmitted at that same frequency (usually 38kHz). This means that you can buy a special infrared detector that has a logic chip built-in to ignore non-control related infrared light. These detectors can be found in nearly any VCR, DVD player, TV, or other remotely controlled indoor appliance - and can easily be read using your Arduino. Radio Shack also sells these Infrared Receiver Modules for about $4 each (part #276-640). The receiver contains 3 pins - +5v, GND, and Input. Simply connect these pins to your Arduino, and you can read the input of the IR module from any Arduino I/O pin.




